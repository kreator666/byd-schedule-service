<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ora.blockchain.mybatis.mapper.transaction.EthereumTransactionMapper">
    <resultMap id="AllColumnMap" type="com.ora.blockchain.mybatis.entity.transaction.EthereumTransaction">
        <result column="id" property="id"/>
        <result column="tx_id" property="txId"/>
        <result column="from" property="from"/>
        <result column="to" property="to"/>
        <result column="block_height" property="blockHeight"/>
        <result column="block_hash" property="blockHash"/>
        <result column="value" property="value"/>
        <result column="gas_price" property="gasPrice"/>
        <result column="gas_used" property="gasUsed"/>
        <result column="nonce" property="nonce"/>
        <result column="input" property="input"/>
    </resultMap>
    <!--auto generated Code-->
    <sql id="all_column">
        `id`,
        `tx_id`,
        `from`,
        `to`,
        `block_height`,
        `block_hash`,
        `value`,
        `gas_price`,
        `gas_used`,
        `nonce`,
         `input`,
        `create_ts`,
        `update_ts`
    </sql>

    <insert id="insertTransaction">
        INSERT INTO ${database}.tx_ethereum ( `id`,
        `tx_id`,
        `from`,
        `to`,
        `block_height`,
        `block_hash`,
        `value`,
        `gas_price`,
        `gas_used`,
          `input`,
        `nonce`)
        VALUES (#{pojo.id}, #{pojo.txId}, #{pojo.from}, #{pojo.to},
            #{pojo.blockHeight}, #{pojo.blockHash},#{pojo.value}, #{pojo.gasPrice},
            #{pojo.gasUsed},#{pojo.input},#{pojo.nonce})
    </insert>

    <insert id="insertTxList">
        INSERT INTO ${database}.tx_ethereum (
        `tx_id`,
        `from`,
        `to`,
        `block_height`,
        `block_hash`,
        `value`,
        `gas_price`,
        `gas_used`,
        `input`,
        `nonce`
        )
        VALUES
        <foreach collection="txList" item="pojo" index="index" separator=",">
            (
            #{pojo.txId}, #{pojo.from}, #{pojo.to},
            #{pojo.blockHeight}, #{pojo.blockHash},#{pojo.value}, #{pojo.gasPrice},
            #{pojo.gasUsed},#{pojo.input},#{pojo.nonce}
            )
        </foreach>
    </insert>


    <select id="queryMaxBlockOfTxInDb" resultType="Long">
        SELECT  IFNULL(MAX(block_height),0 ) FROM ${database}.tx_ethereum
    </select>

    <update id="updateTransacion">
        UPDATE ${database}.tx_ethereum
        <set>
            `block_hash` = #{blockHash}

        </set>
        WHERE block_height = #{blockHeight}
    </update>

    <select id="queryIsolatedBlockTx" resultMap="AllColumnMap">
        SELECT  <include refid="all_column"/> FROM ${database}.tx_ethereum
        WHERE block_hash is NULL
    </select>

    <delete id="deleteTxByTxhash">
        DELETE FROM ${database}.tx_ethereum WHERE tx_id in
        <foreach item="item" index="index" collection="txList" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>



    <update id="batchUpdateStatusAndBlockHashAndUpdateTs" parameterType="java.util.List">
        update ${database}.tx_ethereum
        set  status=
        <foreach collection="txList" item="item" index="index"
                 separator=" " open="case tx_id" close="end">
            when #{item.txId} then #{item.status}
        </foreach>,
        block_height=
        <foreach collection="txList" item="item" index="index"
                 separator=" " open="case tx_id" close="end">
            when #{item.txId} then #{item.blockHeight}
        </foreach>,
        block_hash=
        <foreach collection="txList" item="item" index="index"
                 separator=" " open="case tx_id" close="end">
            when #{item.txId} then #{item.blockHash}
        </foreach>,
        gas_price=
        <foreach collection="txList" item="item" index="index"
                 separator=" " open="case tx_id" close="end">
            when #{item.txId} then #{item.gasPrice}
        </foreach>,
        gas_used=
        <foreach collection="txList" item="item" index="index"
                 separator=" " open="case tx_id" close="end">
            when #{item.txId} then #{item.gasUsed}
        </foreach>,
        value=
        <foreach collection="txList" item="item" index="index"
                 separator=" " open="case tx_id" close="end">
            when #{item.txId} then #{item.value}
        </foreach>,
        input=
        <foreach collection="txList" item="item" index="index"
                 separator=" " open="case tx_id" close="end">
            when #{item.txId} then #{item.input}
        </foreach>,
        nonce=
        <foreach collection="txList" item="item" index="index"
                 separator=" " open="case tx_id" close="end">
            when #{item.txId} then #{item.nonce}
        </foreach>,
        update_ts=
        <foreach collection="txList" item="item" index="index"
                 separator=" " open="case tx_id" close="end">
            when #{item.txId} then #{item.updateTs}
        </foreach>
        where tx_id in
        <foreach collection="txList" index="index" item="item"
                 separator="," open="(" close=")">
            #{item.txId}
        </foreach>
    </update>
</mapper>